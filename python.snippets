global !p
import re
import os

endglobal

snippet d "method" bw
`!p
is_class = px.util.match_higher_indent(
	vim.current.buffer,
	vim.current.window.cursor,
	'^class '
)

self_if_need = ''
if is_class:
	self_if_need = 'self'
	if len(t[2]) > 0 and t[2][:1] != ',':
		if t[2][:1] != ' ':
			self_if_need = self_if_need + ', '
		else:
			self_if_need = self_if_need + ','
`
def $1(`!p snip.rv=self_if_need`$2):
	$3

endsnippet

snippet cl "class" bw
class $1:
	def __init__(self$2):
		`!p
args_contents = t[2]
args = args_contents.split(',');
del args[0]

result = [];
for arg in args:
	arg = arg.strip()
	result.append("self." + arg + " = " + arg)

snip.rv=('\n'+(' '*8)).join(result)
		`

	$3
endsnippet

snippet i "if" w
if $1:
	$2
endsnippet

snippet s "self" w
`!p
code = t[1]
_self = 'self.'
if not len(code) or code[:1] == '.':
	_self = 'self'
snip.rv=_self`$1
endsnippet

snippet r "return" bw
return $0
endsnippet

snippet pr "print with filename"
`!p

strings = ""
if t[1] != "":
	strings = " " + t[1].strip() + ": %s"

`print("`!p snip.rv=os.path.basename(path)+":"+str(vim.current.window.cursor[0])``!p
snip.rv=strings`"${1/.+/ % /}$1)
$0
endsnippet

snippet "if n" "if not" bw
if not $0
endsnippet

snippet rf "return False" bw
return False
endsnippet

snippet rt "return True" bw
return True
endsnippet
