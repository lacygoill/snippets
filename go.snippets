global !p
from snippets.go import *
endglobal

snippet n "" "not is_string()" bwe
func $1($2) $3${3/.+/ /}{
	$4
}

endsnippet

context "not is_string() and should_expand_case(snip.buffer, snip.line)"
snippet c "" bweA
case $1:
	$2
$3
endsnippet

context "not is_string() and px.go.is_before_first_func(snip.buffer, snip.line)"
snippet "^s$" "" bwreA
`!p
if re.match("^([\w\[\]{}]+)$", t[2]):
        type_left = " "
        type_right = ""
else:
        type_left = " struct {\n\t"
        type_right = "\n}"
        if re.match("^\w+\(\)", t[2]):
                type_left = " interface {\n\t"
`type $1`!p snip.rv=type_left`$2`!p snip.rv=type_right`
$0
endsnippet

context "is_first_line(snip)"
priority 2
snippet p "" bweA
package ${1:`!p snip.rv=px.go.guess_package_name_from_file_name(snip.fn)`}

$0
endsnippet

context "is_first_line(snip)"
priority 2
snippet "package m" "" bwrAe
package main
endsnippet

context "snip.line == 0 and snip.column == 0"
snippet m "" eA
package main

func main() {
	$0
}
endsnippet

context "is_if_body(snip.buffer, snip.line)"
snippet p "" bweA
panic(err)
endsnippet

context "is_if_body(snip.buffer, snip.line)"
snippet lf "" bweA
log.Fatal(err)
endsnippet

priority -1
pre_expand "snip.context = get_value_for_if()"
post_jump "jumper_if(snip)"
snippet i "if" bw
if ${1:`!p snip.rv=snip.context`} {
    ${2:${VISUAL}}
}
endsnippet

context "not is_string() and px.go.is_func_declaration(snip.buffer, snip.line)"
snippet e "" we
error
endsnippet

context "not is_string() and px.go.is_type_declaration(snip.buffer, snip.line)"
snippet i "" bwe
$1 int
endsnippet

context "not is_string() and px.go.is_func_declaration(snip.buffer, snip.line)"
snippet i "" we
$1 int,
endsnippet

context "not is_string() and px.go.is_type_declaration(snip.buffer, snip.line)"
snippet s "" bwe
$1 string
endsnippet

context "not is_string() and px.go.is_func_declaration(snip.buffer, snip.line)"
snippet s "" we
$1 string,
endsnippet

context "not is_string() and px.go.is_type_declaration(snip.buffer, snip.line)"
snippet f "" bwe
$1 float64
endsnippet

context "not is_string() and px.go.is_func_declaration(snip.buffer, snip.line)"
snippet f "" we
$1 float64,
endsnippet

context "not is_string() and px.go.is_func_declaration(snip.buffer, snip.line)"
priority 2
snippet "(\w+) s" "" re
`!p snip.rv=match.group(1)` string, $0
endsnippet

context "not is_string() and px.go.is_func_declaration(snip.buffer, snip.line)"
priority 2
snippet "(\w+) i" "" wre
`!p snip.rv=match.group(1)` int$1, $0
endsnippet


context "not is_string() and px.go.is_func_declaration(snip.buffer, snip.line)"
priority 2
snippet "(\w+)" "" we
`!p snip.rv=match.group(1)` float64, $0
endsnippet

context "not is_string() and px.go.is_type_declaration(snip.buffer, snip.line)"
snippet m "" bwe
$1 map[${2:string}]${3:interface{}}
endsnippet

context "not is_string() and px.go.is_func_declaration(snip.buffer, snip.line)"
snippet m "" we
$1 map[${2:string}]${3:interface{}}$4,
endsnippet

context "not is_string() and px.go.is_func_declaration(snip.buffer, snip.line)"
priority 2
snippet "(\w+) m" "" we
`!p snip.rv=match.group(1)` map[${2:string}]${3:interface{}}, $0
endsnippet

priority -1
snippet ii "if <VISUAL>" bwA
if ${VISUAL} {
	$1
}
endsnippet

snippet fe "fmt.Errorf($1 or VISUAL)" w
fmt.Errorf(${1:${VISUAL}})
endsnippet

snippet fef "fmt.Errorf with message" w
fmt.Errorf("$1: %s", ${2:${VISUAL:err}})
endsnippet

snippet ff "fmt.Errorf only message" w
fmt.Errorf("$1")
endsnippet

snippet r "return" bw
return $1
endsnippet

context "is_if_body(snip.buffer, snip.line)"
snippet r "" eb
return err
endsnippet

snippet ,e ", err" iA
, err$0
endsnippet

snippet "}([\w ])" "else before closing bracket" bwrA
} else {
	`!p snip.rv=match.group(1)`$1
}
endsnippet

context "not is_string() and px.go.is_before_first_func(snip.buffer, snip.line)"
snippet "^c$" "" bwreA
const (
	$0
)
endsnippet

snippet ass "anon struct with fields" w
struct {
	$1
}{
	$2
}
endsnippet

snippet "((\w+)\s*([\w\[\]]+)) to$" "toml annotation" brA
`!p snip.rv=match.group(1)` \`toml:"`!p
snip.rv=px.all.convert_camelcase_to_snakecase(match.group(2))`"\`
endsnippet

snippet "((\w+)\s*([\w\[\]]+)) js$" "json annotation" brA
`!p snip.rv=match.group(1)` \`json:"`!p
snip.rv=px.all.convert_camelcase_to_snakecase(match.group(2))`"\`
endsnippet

snippet msi "map[string]interface" w
map[string]interface{}
endsnippet

snippet sw "switch" bw
switch ${1:name} {
case ${2:true}:
	$3
$4
}
endsnippet

snippet swt "switch true" bw
switch {
case ${1}:
	$2
$3
}
endsnippet

snippet pe "fmt.Printf(%#v" bw
fmt.Println("XXXXXX `!p snip.rv=os.path.basename(vim.current.buffer.name)+":"+str(vim.current.window.cursor[0])`")
endsnippet

snippet pr "fmt.Printf(%#v" bw
`!p
left=t[1] + ': %#v\\n", '
right=')'
if " " in t[1]:
	left=''
	right='\\n")'

left = " "+os.path.basename(vim.current.buffer.name)+":"+str(vim.current.window.cursor[0])+": "+left
`fmt.Printf("XXXXXX`!p snip.rv=left`$1`!p snip.rv=right`
endsnippet

snippet play "package main" bw
package main

import "fmt"

func main() {
	$0
}
endsnippet

snippet "^v" "var" bwrA
`!p
vis = "// variables"
if snip.v.text  != "":
	vis = snip.v.text.replace(" := ", " = ")
`
var (
	${1:`!p snip.rv=vis`}
)
endsnippet

snippet rn "return nil" bw
return nil
endsnippet

snippet ap "append" bw
${1:slice} = append($1, $2)
endsnippet

snippet ms "make slice" w
make([]$1, ${2:0})
endsnippet

snippet mc "make chan" w
make(chan $1, ${2:0})
endsnippet

snippet mm "make map" w
make(map[${1:string}]${2:interface\{\}})
endsnippet

snippet if "interface" w
interface{}
endsnippet

snippet ts "type switch" bw
switch ${1:newVar} := ${2:checkVar}.(type) {
case ${3:Type}:
	$4
}
endsnippet

snippet ,n ", nil" "not is_string() and px.go.is_return_argument(snip.buffer, snip.line, snip.column)"  iAe
, nil
endsnippet

snippet  n, ", nil" "not is_string() and px.go.is_return_argument(snip.buffer, snip.line, snip.column)" wAe
nil,
endsnippet

snippet ,e ", err" wA
, err
endsnippet

snippet "return e" "return err" bw
return err
endsnippet

snippet "return n" "return nil" bw
return nil
endsnippet

snippet "r (.)" "return letter" bwrA
return `!p snip.rv=match.group(1)`
endsnippet

snippet frr "forever" bw
for {
	$1
}
endsnippet

snippet qt "t.fatal" bw
if err != nil {
	t.Fatal(err)
}
endsnippet

snippet tf "t.fatalf" bw
t.Fatalf("$1")
endsnippet

snippet qf "log fatal" bw
if err != nil {
	log.Fatal(err)
}
endsnippet

snippet qff "log fatalf" bw
if err != nil {
	log.Fatalf(\`$1: %s\`, $2, err)
}
endsnippet

snippet rt "return true" bw
return true
endsnippet

snippet fa "false" w
false
endsnippet

snippet tr "false" w
true
endsnippet

snippet rf "return false" bw
return false
endsnippet


context "snip.context={'snip':snip}"
snippet "^d$" "" bweAr
`!p
(a_left, a_right, r_left, r_right, binding) = action_define_method(snip, t)
`
func (`!p snip.rv=binding`) $1`!p snip.rv=a_left`$2`!p snip.rv=a_right``!p snip.rv=r_left`$3`!p snip.rv=r_right`{
	$4
}

endsnippet

context "snip.context={'snip':snip}"
snippet "^s$" "" bweAr
`!p
(a_left, a_right, r_left, r_right, binding) = action_define_method(snip, t, True)
`
func (`!p snip.rv=binding`) $1`!p snip.rv=a_left`$2`!p snip.rv=a_right``!p snip.rv=r_left`$3`!p snip.rv=r_right`{
	$4
}

endsnippet

snippet re "return errors.New" bw
return errors.New($1)
endsnippet

snippet lf "log.Printf" w
log.Printf($1)
endsnippet

snippet ld "log.Printf error" w
log.Printf("$1: %s", ${2:err})
endsnippet

snippet td "todo" bw
// @TODO:
endsnippet

snippet l "last slice usage" iw
${1:`!p snip.rv=px.go.get_previous_slice_usage()`}[$2]
endsnippet

snippet "(func\s.*\)\s+)([\w\d_\s\{\}\[\]\*\.]+),\s?([\w\d_\s\{\}\[\]\*\.]+)" "add commas around multple return variables" r
`!p snip.rv=match.group(1)`(`!p snip.rv=match.group(2)`, `!p snip.rv=match.group(3)`)`!p snip.rv=" "`
endsnippet

snippet "^\)\s+?([\w\d_\s\{\}\[\]\*\.]+),\s+?([\w\d_\s\{\}\[\]\*\.]+)" "return multipleadd commas around multple return variables" r
) (`!p snip.rv=match.group(1)`, `!p snip.rv=match.group(2)`)`!p snip.rv=" "`
endsnippet

snippet lp "log.Printf" wA
`!p
left = ''
right = ''
if " " in t[1] and not '"' in t[1]:
	left = '"'
	right = '"'

func = "Printf"
if t[1] == "err":
	func = "Println"

`log.`!p snip.rv=func`(`!p snip.rv=left`$1`!p snip.rv=right`)
endsnippet

snippet fp "fmt.Println" wA
fmt.Println($1)
endsnippet

snippet ej "print json" bw
`!p
from random import randint

name = t[1] + str(randint(10, 9999))
`ej`!p snip.rv=name`, _ := json.MarshalIndent($1, "", "  ")
fmt.Printf("`!p snip.rv=t[1]`: %s\n", string(ej`!p snip.rv=name`))
endsnippet

snippet "^e" "func Test" wrA
func Test$1(t *testing.T) {
	test := assert.New(t)

	$2
}
endsnippet

snippet , "return ... , nil" "not is_string() and px.go.is_return_argument(snip.buffer, snip.line, snip.column)" ie
, `!p if px.go.is_in_err_condition(vim.current.buffer, vim.current.window.cursor[0], vim.current.window.cursor[1]):
	snip.rv = "err"
else:
	snip.rv = "nil"`
endsnippet

snippet ef "fmt.Errorf" w
fmt.Errorf($1, $2)
endsnippet

snippet tx "this instance" w
`!p
buffer = vim.current.buffer
line, column = vim.current.window.cursor

result = 't'
while True:
	line = line - 1
	if line == 0:
		break

	line_contents = buffer[line - 1]
	matches = re.match(r'(?m)^func \(([^)]+)\s+([^)]+)\) ', line_contents)
	if not matches:
		continue

	result = matches.group(1)
	break


snip.rv=result`
endsnippet

snippet v "var ()" bw
var (
	$1
)
endsnippet

context "not is_string() and px.go.gocode_can_complete()"
pre_expand "gocode_complete_function(snip)"
snippet "(\w+\.\w+)" "" re
endsnippet

snippet & "expand amp" "should_expand_amp(snip.buffer, snip.line, snip.column)" Awe
&& $0
endsnippet


snippet ,- "underscore" iA
, _
endsnippet

snippet "^t" "" wAr
type (
`!p
snip.rv=snip.v.text.replace("type ", "\t")
`)
endsnippet

snippet err. "err.Error()" wA
err.Error()
endsnippet

snippet "^o$" "new" rA
`!p

if t[1]:
	type = t[1]
else:
	bindings = px.go.extract_prev_method_binding_for_cursor()
	if not bindings:
		type = 'someStruct'
	else:
		type = bindings[1]

ctype = type[0].upper() + type[1:]
`func New`!p snip.rv=ctype`($2) (${1:`!p snip.rv=type`}, error) {
	$3
}
endsnippet

snippet "^p$" "new" rA
`!p

if t[1]:
	type = t[1]
else:
	bindings = px.go.extract_prev_method_binding_for_cursor()
	if not bindings:
		type = 'someStruct'
	else:
		type = bindings[1]

ctype = type[0].upper() + type[1:]
`func New`!p snip.rv=ctype`($2) (*${1:`!p snip.rv=type`}, error) {
	$3
}
endsnippet

snippet f "for range" bw
for ${3:key}, ${2:value} := range ${1:`!p snip.rv=px.all.get_last_used_var_for_snippet()`} {
	${4:${VISUAL}}
}
endsnippet

snippet fo "for without body" bw
for {
	${1:${VISUAL}}
}
endsnippet


snippet = "" iA
`!p
buffer = vim.current.buffer
line, column = vim.current.window.cursor

if line - 1 >= 0 and column - 1 >= 0:
	if not re.match(r'\w', buffer[line-1][column-1]):
		snip.rv = "= "
	else:
		snip.rv = " = "
`
endsnippet

priority 2
snippet "= =" "" "is_if_condition(snip)" Aie
== $0
endsnippet

priority 2
snippet "= =" "" Ai
:= $0
endsnippet

priority 3
snippet "== =" "" Ai
!= $0
endsnippet

priority 3
snippet "!= =" "" Ai
== $0
endsnippet

priority 3
snippet ":= =" "" Ai
= $0
endsnippet

snippet "=  " "!= nil" A
!= nil$0
endsnippet

snippet "= n" "" "is_if_condition(snip)" Aie
= nil$0
endsnippet

priority 4
snippet "== nil=" "" "is_if_condition(snip)" Aie
!= nil$0
endsnippet

priority 4
snippet "!= nil=" "" "is_if_condition(snip)" Aie
== nil$0
endsnippet
