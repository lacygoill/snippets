global !p
import re
import os.path
import vim

import px.go
import px.all
endglobal

snippet n "new simple function" bw
func $1($2) $3${3/.+/ /}{
	$4
}
endsnippet

global !p
def should_expand_case(buffer, line):
    if not px.go.is_switch(buffer, line):
        return False

    switch_line = px.go.get_bracket_line(buffer, line)
    switch_line_indent = px.util.get_indentation(buffer[switch_line])

    if switch_line_indent == px.util.get_indentation(buffer[line]):
        return True

    return False

def is_first_line(snip):
	return snip.line == 0
endglobal

snippet c "case" "should_expand_case(snip.buffer, snip.line)" bweA
case $1:
	$2
$3
endsnippet

snippet "^s$" "type struct" "px.go.is_before_first_func(snip.buffer, snip.line)" bwreA
`!p
if re.match("^([\w\[\]{}]+)$", t[2]):
        type_left = " "
        type_right = ""
else:
        type_left = " struct {\n\t"
        type_right = "\n}"
        if re.match("^\w+\(\)", t[2]):
                type_left = " interface {\n\t"
`type $1`!p snip.rv=type_left`$2`!p snip.rv=type_right`
$0
endsnippet

priority 2
snippet p "package + guess package name" "is_first_line(snip)" bweA
package ${1:`!p snip.rv=px.go.guess_package_name_from_file_name(snip.fn)`}

$0
endsnippet

priority 2
snippet "package m" "package main" "is_first_line(snip)" bwrAe
package main
endsnippet

snippet m "package main and func main" "snip.line == 0 and snip.column == 0" eA
package main

func main() {
	$0
}
endsnippet

global !p
def is_if_body(buffer, line):
	return re.match('^\s+if.*err ', px.util.get_prev_nonempty_line(buffer, line))
endglobal

snippet p "panic() in `if` body" "is_if_body(snip.buffer, snip.line)" bweA
panic(err)
endsnippet

snippet lf "log.Fatal() in `if` body" "is_if_body(snip.buffer, snip.line)" bweA
log.Fatal(err)
endsnippet

global !p
# todo fix this
def get_value_for_if():
	value = px.all.get_last_defined_var_for_snippet()
	if value == 'err':
		value = 'err != nil'

	return value

def jumper_if(snip):
	if snip.tabstops[1].current_text == "err != nil" and snip.tabstop == 1 and snip.jump_direction == 1 :
		vim.command('call feedkeys("\<C-J>")')
endglobal

priority -1
pre_expand "snip.context = get_value_for_if()"
post_jump "jumper_if(snip)"
snippet i "if" bw
if ${1:`!p snip.rv=snip.context`} {
    ${2:${VISUAL}}
}
endsnippet

snippet e "error in func declaration" "px.go.is_func_declaration(snip.buffer, snip.line)" we
error
endsnippet

snippet i "integer field in type" "px.go.is_type_declaration(snip.buffer, snip.line)" bwe
$1 int
endsnippet

snippet i "integer field in func" "px.go.is_func_declaration(snip.buffer, snip.line)" we
$1 int,
endsnippet

snippet s "string field in type" "px.go.is_type_declaration(snip.buffer, snip.line)" bwe
$1 string
endsnippet

snippet s "string field in func" "px.go.is_func_declaration(snip.buffer, snip.line)" we
$1 string,
endsnippet

snippet f "float64 field" "px.go.is_type_declaration(snip.buffer, snip.line)" bwe
$1 float64
endsnippet

snippet f "float64 field" "px.go.is_func_declaration(snip.buffer, snip.line)" we
$1 float64,
endsnippet

priority 2
snippet "(\w+) s" "string field in func" "px.go.is_func_declaration(snip.buffer, snip.line)" re
`!p snip.rv=match.group(1)` string, $0
endsnippet

priority 2
snippet "(\w+) i" "integer field in func" "px.go.is_func_declaration(snip.buffer, snip.line)" wre
`!p snip.rv=match.group(1)` int$1, $0
endsnippet


priority 2
snippet "(\w+)" "float64 field in func" "px.go.is_func_declaration(snip.buffer, snip.line)" we
`!p snip.rv=match.group(1)` float64, $0
endsnippet

snippet m "map field in type" "px.go.is_type_declaration(snip.buffer, snip.line)" bwe
$1 map[${2:string}]${3:interface{}}
endsnippet

snippet m "map field in func" "px.go.is_func_declaration(snip.buffer, snip.line)" we
$1 map[${2:string}]${3:interface{}}$4,
endsnippet

priority 2
snippet "(\w+) m" "map field in func" "px.go.is_func_declaration(snip.buffer, snip.line)" we
`!p snip.rv=match.group(1)` map[${2:string}]${3:interface{}}, $0
endsnippet

priority -1
snippet ii "if <VISUAL>" bwA
if ${VISUAL} {
	$1
}
endsnippet

snippet q "if err != nil return err" bw
if err != nil {
	return err
}
endsnippet

snippet fe "fmt.Errorf($1 or VISUAL)" w
fmt.Errorf(${1:${VISUAL}})
endsnippet

snippet fef "fmt.Errorf with message" w
fmt.Errorf("$1: %s", ${2:${VISUAL:err}})
endsnippet

snippet ff "fmt.Errorf only message" w
fmt.Errorf("$1")
endsnippet

snippet qe "if err != nil return error with message" bw
if err != nil {
	return fmt.Errorf("$1: %s", err.Error())
}
endsnippet

snippet qq "if err != nil return two variables, second is err" bw
if err != nil {
	return ${1:nil}, err
}
endsnippet

snippet qqe "if err != nil return two variables, error with message" bw
if err != nil {
	return ${1:nil}, fmt.Errorf("$2: %s", err.Error())
}
endsnippet

snippet qp "if err != nil panic" bwA
if err != nil {
	panic(err)
}
endsnippet

snippet qn "if ... == nil" bwA
if ${1:value} == nil {
	${0:${VISUAL}}
}
endsnippet

snippet r "return" bw
return $1
endsnippet

snippet r "return in `if` body" "is_if_body(snip.buffer, snip.line)" eb
return err
endsnippet

snippet ,e ", err" iA
, err$0
endsnippet

snippet "}([\w ])" "else before closing bracket" bwrA
} else {
	`!p snip.rv=match.group(1)`$1
}
endsnippet

snippet "^c$" "const before first func" "px.go.is_before_first_func(snip.buffer, snip.line)" bwreA
const (
	$0
)
endsnippet

snippet ass "anon struct with fields" w
struct {
	$1
}{
	$2
}
endsnippet

snippet "((\w+)\s*([\w\[\]]+)) toml$" "toml annotation" brA
`!p snip.rv=match.group(1)` \`toml:"`!p
snip.rv=px.all.convert_camelcase_to_snakecase(match.group(2))`"\`
endsnippet

snippet "((\w+)\s*([\w\[\]]+)) js$" "json annotation" brA
`!p snip.rv=match.group(1)` \`json:"`!p
snip.rv=px.all.convert_camelcase_to_snakecase(match.group(2))`"\`
endsnippet

snippet msi "map[string]interface" w
map[string]interface{}
endsnippet

snippet sw "switch" bw
switch ${1:name} {
case ${2:true}:
	$3
$4
}
endsnippet

snippet swt "switch true" bw
switch {
case ${1}:
	$2
$3
}
endsnippet

snippet pe "fmt.Printf(%#v" bw
fmt.Println("XXXXXX `!p snip.rv=os.path.basename(vim.current.buffer.name)+":"+str(vim.current.window.cursor[0])`")
endsnippet

snippet pr "fmt.Printf(%#v" bw
`!p
left=t[1] + ': %#v\\n", '
right=')'
if " " in t[1]:
	left=''
	right='\\n")'

left = " "+os.path.basename(vim.current.buffer.name)+":"+str(vim.current.window.cursor[0])+": "+left
`fmt.Printf("XXXXXX`!p snip.rv=left`$1`!p snip.rv=right`
endsnippet

snippet play "package main" bw
package main

import "fmt"

func main() {
	$0
}
endsnippet

snippet "^v" "var" bwrA
`!p
vis = "// variables"
if snip.v.text  != "":
	vis = snip.v.text.replace(" := ", " = ")
`
var (
	${1:`!p snip.rv=vis`}
)
endsnippet

snippet rn "return nil" bw
return nil
endsnippet

snippet ap "append" bw
${1:slice} = append($1, $2)
endsnippet

snippet ms "make slice" w
make([]$1, ${2:0})
endsnippet

snippet mc "make chan" w
make(chan $1, ${2:0})
endsnippet

snippet mm "make map" w
make(map[${1:string}]${2:interface\{\}})
endsnippet

snippet nn "!= nil" w
${1:${VISUAL}} != nil
endsnippet

snippet if "interface" w
interface{}
endsnippet

snippet ts "type switch" bw
switch ${1:newVar} := ${2:checkVar}.(type) {
case ${3:Type}:
	$4
}
endsnippet

snippet ,n ", nil" "px.go.is_return_argument(snip.buffer, snip.line, snip.column)"  iAe
, nil
endsnippet

snippet  n, ", nil" "px.go.is_return_argument(snip.buffer, snip.line, snip.column)" wAe
nil,
endsnippet

snippet ,e ", err" wA
, err
endsnippet

snippet "return e" "return err" bw
return err
endsnippet

snippet "return n" "return nil" bw
return nil
endsnippet

snippet "r (.)" "return letter" bwrA
return `!p snip.rv=match.group(1)`
endsnippet

snippet frr "forever" bw
for {
	$1
}
endsnippet

snippet qt "t.fatal" bw
if err != nil {
	t.Fatal(err)
}
endsnippet

snippet tf "t.fatalf" bw
t.Fatalf("$1")
endsnippet

snippet qf "log fatal" bw
if err != nil {
	log.Fatal(err)
}
endsnippet

snippet qff "log fatalf" bw
if err != nil {
	log.Fatalf(\`$1: %s\`, $2, err)
}
endsnippet

snippet rt "return true" bw
return true
endsnippet

snippet fa "false" w
false
endsnippet

snippet tr "false" w
true
endsnippet

snippet rf "return false" bw
return false
endsnippet

# @TODO: fix this, should separate line if len > 79 and add commas
#global !p
#def should_expand_zap(snip):
	#return False

	#if px.util.match_higher_indent(snip.buffer, (snip.line, 0), '^func '):
		#if len(snip.buffer[snip.line]) > 79:
			#return snip.buffer[snip.line].replace(", ", ",\n\t")

	#return False
#endglobal

#snippet "\t(.*)" "" "should_expand_zap(snip)" bwreA
#`!p
#snip.rv=snip.context
#`
#endsnippet


global !p
def action_define_method(snip, pointer=False):
	a_left = '('
	a_right = ')'

	buffer = vim.current.buffer
	line = snip.context['snip'].line + 1

	contents = buffer[line]
	if line+1 < len(buffer) and buffer[line+1][0] == "\t" and buffer[line][-1] != '{':
		x = 1
		while True:
			if line+x >= len(buffer):
				break

			contents = contents + buffer[line+x].strip()

			if buffer[line+x] != '' and buffer[line+x][0] == ')':
				break

			x += 1


	if len(contents) > 80:
		a_left = "(\n\t"
		a_right = "\n)"

	r_left = ' '
	r_right = ' '

	if "," in t[3]:
		r_left = ' ('
		r_right = ') '

	name, type = px.go.extract_prev_method_binding_for_cursor()
	if pointer:
		type = '*' + type

	binding = name + ' ' + type

	return (a_left, a_right, r_left, r_right, binding)
endglobal

snippet "^d$" "define method" "snip.context={'snip':snip}" bweAr
`!p
(a_left, a_right, r_left, r_right, binding) = action_define_method(snip)
`
func (`!p snip.rv=binding`) $1`!p snip.rv=a_left`$2`!p snip.rv=a_right``!p snip.rv=r_left`$3`!p snip.rv=r_right`{
	$4
}

endsnippet

snippet "^s$" "define method for pointer" "snip.context={'snip':snip}" bweAr
`!p
(a_left, a_right, r_left, r_right, binding) = action_define_method(snip, True)
`
func (`!p snip.rv=binding`) $1`!p snip.rv=a_left`$2`!p snip.rv=a_right``!p snip.rv=r_left`$3`!p snip.rv=r_right`{
	$4
}

endsnippet

snippet re "return errors.New" bw
return errors.New($1)
endsnippet

snippet lf "log.Printf" w
log.Printf($1)
endsnippet

snippet ld "log.Printf error" w
log.Printf("$1: %s", err)
endsnippet

snippet td "todo" bw
// @TODO:
endsnippet

snippet l "last slice usage" iw
${1:`!p snip.rv=px.go.get_previous_slice_usage()`}[$2]
endsnippet

snippet "(func\s.*\)\s+)([\w\d_\s\{\}\[\]\*\.]+),\s?([\w\d_\s\{\}\[\]\*\.]+)" "add commas around multple return variables" r
`!p snip.rv=match.group(1)`(`!p snip.rv=match.group(2)`, `!p snip.rv=match.group(3)`)`!p snip.rv=" "`
endsnippet

snippet "^\)\s+?([\w\d_\s\{\}\[\]\*\.]+),\s+?([\w\d_\s\{\}\[\]\*\.]+)" "return multipleadd commas around multple return variables" r
) (`!p snip.rv=match.group(1)`, `!p snip.rv=match.group(2)`)`!p snip.rv=" "`
endsnippet

snippet lp "log.Printf" wA
`!p
left = ''
right = ''
if " " in t[1] and not '"' in t[1]:
	left = '"'
	right = '"'

func = "Printf"
if t[1] == "err":
	func = "Println"

`log.`!p snip.rv=func`(`!p snip.rv=left`$1`!p snip.rv=right`)
endsnippet

snippet fp "fmt.Println" wA
fmt.Println($1)
endsnippet

snippet ej "print json" bw
`!p
from random import randint

name = t[1] + str(randint(10, 9999))
`ej`!p snip.rv=name`, _ := json.MarshalIndent($1, "", "  ")
fmt.Printf("`!p snip.rv=t[1]`: %s\n", string(ej`!p snip.rv=name`))
endsnippet

snippet te "func Test" bw
func Test$1(t *testing.T) {
	$2
}
endsnippet

snippet , "return ... , nil" "px.go.is_return_argument(snip.buffer, snip.line, snip.column)" ie
, `!p if px.go.is_in_err_condition(vim.current.buffer, vim.current.window.cursor[0], vim.current.window.cursor[1]):
	snip.rv = "err"
else:
	snip.rv = "nil"`
endsnippet

snippet ef "fmt.Errorf" w
fmt.Errorf($1, $2)
endsnippet

snippet tx "this instance" w
`!p
buffer = vim.current.buffer
line, column = vim.current.window.cursor

result = 't'
while True:
	line = line - 1
	if line == 0:
		break

	line_contents = buffer[line - 1]
	matches = re.match(r'(?m)^func \(([^)]+)\s+([^)]+)\) ', line_contents)
	if not matches:
		continue

	result = matches.group(1)
	break


snip.rv=result`
endsnippet

snippet v "var ()" bw
var (
	$1
)
endsnippet

snippet /n "!= nil"
!= nil$0
endsnippet

snippet .n "== nil"
== nil$0
endsnippet

global !p
def gocode_complete_function(snip):
	(snip_ret, snip_func) = px.go.get_gocode_complete(False)
	snip_full = px.go.get_gocode_complete(True)

	cur_line = re.sub('\w+\.\w+$', '', snip.buffer[snip.line][:snip.column])
	cur_line = cur_line + "" + snip.buffer[snip.line	][snip.column+1:]
	snip.buffer[snip.line] = cur_line

	prev_line = px.util.get_prev_nonempty_line(snip.buffer, snip.line)

	if prev_line[-1] == ',' or prev_line[-1] == '(' or prev_line[-1] == '&' or cur_line.strip() != '':
		snip.expand_anon(snip_func)
		return


	matches = re.search('\${(\d+):error}', snip_ret)
	if not matches:
		snip.expand_anon(snip_full)
		return

	placeholder_err = matches.group(1)
	snip_full = snip_full.replace(
		'${'+placeholder_err+':error}',
		'${'+placeholder_err+':err}',
	)

	actions = {
		'post_jump': """placeholder_err = """+placeholder_err +"""
if snip.tabstop == 0:
	err = snip.tabstops[placeholder_err].current_text
	if err != '_':
		snip.expand_anon("\\nif " + err + " != nil {\\n\\t$1\\n}")
"""
	}

	snip.expand_anon(
		snip_full,
		actions = actions,
	)
endglobal

pre_expand "gocode_complete_function(snip)"
snippet "(\w+\.\w+)" "gocode complete function return variables and arguments" "px.go.gocode_can_complete()" re
endsnippet

global !p
def should_expand_amp(buffer, line, column):
	line_contents = buffer[line]

	if line_contents.strip().startswith('if '):
		return True

	prev_line = px.util.get_prev_nonempty_line(buffer, line)

	higher = px.util.get_higher_indent(buffer, (line, 0))
	if not higher:
		return False

	(higher_line, _) = higher

	if prev_line == higher_line and prev_line.strip().startswith('if '):
		return True

	return False
endglobal

snippet & "expand amp" "should_expand_amp(snip.buffer, snip.line, snip.column)" Awe
&& $0
endsnippet

snippet = ":=" iA
`!p
buffer = vim.current.buffer
line, column = vim.current.window.cursor

if line - 1 >= 0 and column - 1 >= 0:
	if not re.match(r'\w', buffer[line-1][column-1]):
		snip.rv = "= "
	else:
		snip.rv = " = "
`
endsnippet

priority 2
snippet "= =" "" Ai
`!p snip.rv="== "`
endsnippet

snippet "= \" "wut" Ai
`!p snip.rv=":= "`
endsnippet

snippet ,- "underscore" iA
, _
endsnippet

snippet "^t" "" wAr
type (
`!p
snip.rv=snip.v.text.replace("type ", "\t")
`)
endsnippet

snippet err. "err.Error()" wA
err.Error()
endsnippet

snippet "^o$" "new" rA
`!p

if t[1]:
	type = t[1]
else:
	bindings = px.go.extract_prev_method_binding_for_cursor()
	if not bindings:
		type = 'someStruct'
	else:
		type = bindings[1]

ctype = type[0].upper() + type[1:]
`func New`!p snip.rv=ctype`($2) (${1:`!p snip.rv=type`}, error) {
	$3
}
endsnippet

snippet "^p$" "new" rA
`!p

if t[1]:
	type = t[1]
else:
	bindings = px.go.extract_prev_method_binding_for_cursor()
	if not bindings:
		type = 'someStruct'
	else:
		type = bindings[1]

ctype = type[0].upper() + type[1:]
`func New`!p snip.rv=ctype`($2) (*${1:`!p snip.rv=type`}, error) {
	$3
}
endsnippet

snippet f "for range" bw
for ${3:key}, ${2:value} := range ${1:`!p snip.rv=px.all.get_last_used_var_for_snippet()`} {
	${4:${VISUAL}}
}
endsnippet

snippet fo "for without body" bw
for {
	${1:${VISUAL}}
}
endsnippet
