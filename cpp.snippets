global !p

from snippets import *

import px
for full_name, name in px.libs().items():
    exec("import " + full_name)
endglobal

snippet n "function" w
${1:int} ${2:main}($3) {
	$4
}
endsnippet

snippet i "if" b
if ($1) {
	$2
}$0
endsnippet

snippet }e "else" wA
} else {
	$1
}
endsnippet


context "px.snippets.make_context(snip)"
pre_expand "px.common.get_active_completer().reset()"

snippet pr "fmt printf xxx debug" bwe
`!p

try:
    once
except:
    once = True
    cursor = px.cursor.get()

func = 'printf'
left = '"'
right = ')'

if t[1] != '':
    left = ' ' + t[1] + ': %s\\n", '
    right = ')'

if " " in t[1]:
    left = ' '
    right = '\\n")'

left = " " + os.path.basename(px.buffer.get().name) + ":" + str(cursor[0]) + left

``!p snip.rv = func`("XXXXXX`!p snip.rv=left`${1}`!p snip.rv=right`;fflush(NULL);
endsnippet


snippet df "" w
debugf("$1: ${3:%s}", $2);
endsnippet

snippet dd "debugf" w
debug("$1");
endsnippet

snippet fi "for" w
for ($1 = 0; $1 < $2; $1++) {
    $3
}
endsnippet

snippet f "for empty" w
for ($1) {
	$2
}

$0
endsnippet

snippet r "" w
return $0;
endsnippet

snippet # "#include" b
`!p
lparen = '<'
rparen = '>'
if os.path.exists(t[1]):
    lparen = '"'
    rparen = '"'
`#include `!p snip.rv = lparen`$1`!p snip.rv = rparen`
endsnippet

snippet #d "#define" wA
`!p
parts = t[1].split(' ')
t[1] = ' '.join(parts)
`#define $1
endsnippet

snippet t "struct" b
struct $1 {
    $0
};
endsnippet

snippet s "std::" w
std::$0
endsnippet

priority 10
snippet std::s "std::string" w
std::string $0
endsnippet

snippet t "" w
try {
	$1
} catch ($2) {
	$3
}
endsnippet

snippet tp "" w
tuple<${1:${VISUAL:std::string}}>$0
endsnippet

snippet ie "" w
if (!$1.err.empty()) {
	$2
}
endsnippet

snippet ier "" w
if (!$1.err.empty()) {
	result.err = $1.err;

	return result;
}
endsnippet

snippet ir "" w
if (!$1.err.empty()) {
	return $1.err;
}
endsnippet

snippet rr "" w
return result;
endsnippet

snippet r: "" w
ret:
endsnippet

snippet rv "" w
result.value = $1;
endsnippet

snippet tr "" w
tuple<${1:std::string}> result;
endsnippet

snippet ss "" w
std::string $0
endsnippet

snippet vr "" w
$1 = $2.value;
endsnippet

snippet dh "" w
`!p

file = os.path.basename(px.buffer.get().name).replace('.hpp', '').replace('.h', '').upper()

`#ifndef _${1:`!p snip.rv=file`}_HEADER
#define _$1_HEADER

${VISUAL}

#endif // _$1_HEADER
endsnippet
